package com.bobble.bobblesampleapp.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LOG_EVENTS".
*/
public class LogEventsDao extends AbstractDao<LogEvents, Long> {

    public static final String TABLENAME = "LOG_EVENTS";

    /**
     * Properties of entity LogEvents.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ScreenName = new Property(1, String.class, "screenName", false, "SCREEN_NAME");
        public final static Property EventAction = new Property(2, String.class, "eventAction", false, "EVENT_ACTION");
        public final static Property EventName = new Property(3, String.class, "eventName", false, "EVENT_NAME");
        public final static Property EventLabel = new Property(4, String.class, "eventLabel", false, "EVENT_LABEL");
        public final static Property EventTimestamp = new Property(5, long.class, "eventTimestamp", false, "EVENT_TIMESTAMP");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
    };


    public LogEventsDao(DaoConfig config) {
        super(config);
    }
    
    public LogEventsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOG_EVENTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SCREEN_NAME\" TEXT NOT NULL ," + // 1: screenName
                "\"EVENT_ACTION\" TEXT NOT NULL ," + // 2: eventAction
                "\"EVENT_NAME\" TEXT NOT NULL ," + // 3: eventName
                "\"EVENT_LABEL\" TEXT NOT NULL ," + // 4: eventLabel
                "\"EVENT_TIMESTAMP\" INTEGER NOT NULL ," + // 5: eventTimestamp
                "\"STATUS\" TEXT NOT NULL );"); // 6: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOG_EVENTS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LogEvents entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getScreenName());
        stmt.bindString(3, entity.getEventAction());
        stmt.bindString(4, entity.getEventName());
        stmt.bindString(5, entity.getEventLabel());
        stmt.bindLong(6, entity.getEventTimestamp());
        stmt.bindString(7, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LogEvents readEntity(Cursor cursor, int offset) {
        LogEvents entity = new LogEvents( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // screenName
            cursor.getString(offset + 2), // eventAction
            cursor.getString(offset + 3), // eventName
            cursor.getString(offset + 4), // eventLabel
            cursor.getLong(offset + 5), // eventTimestamp
            cursor.getString(offset + 6) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LogEvents entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScreenName(cursor.getString(offset + 1));
        entity.setEventAction(cursor.getString(offset + 2));
        entity.setEventName(cursor.getString(offset + 3));
        entity.setEventLabel(cursor.getString(offset + 4));
        entity.setEventTimestamp(cursor.getLong(offset + 5));
        entity.setStatus(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LogEvents entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LogEvents entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
